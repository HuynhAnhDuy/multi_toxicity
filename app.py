import streamlit as st
import pandas as pd
from predict_rf_pubchem_hepa import predict_from_smiles

st.set_page_config(page_title="Toxicity Predictor", layout="centered")

st.title("üß™ Hepatotoxicity Predictor")
st.markdown("Nh·∫≠p m·ªôt ho·∫∑c nhi·ªÅu SMILES ƒë·ªÉ d·ª± ƒëo√°n li·ªáu h·ª£p ch·∫•t c√≥ **ƒë·ªôc t√≠nh tr√™n gan (hepatotoxic)** hay kh√¥ng.")

# ========== SIDEBAR ==========
with st.sidebar:
    st.header("üßæ Instructions")
    st.markdown("""
    1. Paste SMILES ho·∫∑c upload file CSV ch·ª©a SMILES.  
    2. Nh·∫•n **Predict** ƒë·ªÉ xem k·∫øt qu·∫£.  
    """)
    st.markdown("---")
    st.markdown("""
    üîç **Quy t·∫Øc ph√¢n lo·∫°i:**  
    - **X√°c su·∫•t > 0.5** ‚Üí ‚ò£Ô∏è **Toxic**  
    - **X√°c su·∫•t ‚â§ 0.5** ‚Üí ‚úÖ **Non-toxic**
    """)
    st.markdown("---")
    st.info("Hi·ªán t·∫°i ch·ªâ h·ªó tr·ª£ nh·∫≠p SMILES tr·ª±c ti·∫øp.")

# ==== Nh·∫≠p SMILES tr·ª±c ti·∫øp ====
smiles_input = st.text_area(
    "Nh·∫≠p SMILES (m·ªói d√≤ng m·ªôt SMILES):",
    height=200,
    placeholder="V√≠ d·ª•:\nCCO\nc1ccccc1C(=O)O\nCN(C)C=O"
)

if st.button("üîç D·ª± ƒëo√°n"):
    if not smiles_input.strip():
        st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt SMILES.")
    else:
        smiles_list = [s.strip() for s in smiles_input.strip().splitlines() if s.strip()]
        
        try:
            results = predict_from_smiles(smiles_list)
            results.index += 1  # start from 1
            st.success(f"‚úÖ D·ª± ƒëo√°n ho√†n t·∫•t cho {len(results)} h·ª£p ch·∫•t.")
            st.dataframe(results, use_container_width=True)

            # Cho ph√©p t·∫£i k·∫øt qu·∫£
            csv = results.to_csv(index=False)
            st.download_button("üì• T·∫£i k·∫øt qu·∫£ CSV", csv, file_name="prediction_results.csv", mime="text/csv")
        
        except Exception as e:
            st.error(f"‚ùå L·ªói: {e}")
